name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run migrations and tests
      env:
        DEBUG: "False"
        SECRET_KEY: test-secret-key-for-ci-cd-pipeline
        POSTGRES_DB: test_db
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        CELERY_BROKER_URL: redis://localhost:6379/0
        CELERY_RESULT_BACKEND: redis://localhost:6379/0
      run: |
        python manage.py migrate --noinput
        python manage.py test
        python manage.py check --deploy

  deploy:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          set -e
          
          echo "üöÄ INICIANDO DEPLOY AUTOM√ÅTICO..."
          
          cd /opt/django-bootstrap
          
          # Pull do c√≥digo mais recente
          echo "üì• Atualizando c√≥digo..."
          git pull origin main
          
          # Build das imagens usando arquivo de produ√ß√£o
          echo "üê≥ Build das imagens Docker (produ√ß√£o)..."
          docker compose -f docker-compose.prd.yml build --no-cache
          
          # Parar e recriar os containers
          echo "üîÑ Reiniciando containers..."
          docker compose -f docker-compose.prd.yml down
          docker compose -f docker-compose.prd.yml up -d
          
          # Aguardar servi√ßos iniciarem
          echo "‚è≥ Aguardando servi√ßos iniciarem..."
          sleep 10
          
          # Executar migra√ß√µes
          echo "üóÉÔ∏è Executando migra√ß√µes..."
          docker compose -f docker-compose.prd.yml exec -T web python manage.py migrate --noinput
          
          # Coletar static files
          echo "üì¶ Coletando arquivos est√°ticos..."
          docker compose -f docker-compose.prd.yml exec -T web python manage.py collectstatic --noinput --clear
          
          # Verificar se os servi√ßos est√£o rodando
          echo "‚úÖ Verificando servi√ßos..."
          docker compose -f docker-compose.prd.yml ps
          
          # Verificar logs recentes
          echo "üìã Logs recentes do servi√ßo web:"
          docker compose -f docker-compose.prd.yml logs --tail=20 web
          
          echo "üéâ DEPLOY CONCLU√çDO COM SUCESSO!"
          echo "üåê Acesse: http://${{ secrets.SERVER_HOST }}"
